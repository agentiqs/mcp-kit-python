name: Run Examples

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  discover-examples:
    runs-on: ubuntu-latest
    outputs:
      examples: ${{ steps.find-examples.outputs.examples }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Find example directories
      id: find-examples
      run: |
        # Find all directories in examples/ that have both pyproject.toml and main.py
        examples=$(find examples -maxdepth 1 -type d -name "*" | while read dir; do
          if [ "$dir" != "examples" ] && [ -f "$dir/pyproject.toml" ] && [ -f "$dir/main.py" ]; then
            basename "$dir"
          fi
        done | jq -R -s -c 'split("\n")[:-1]')
        
        echo "Found examples: $examples"
        echo "examples=$examples" >> $GITHUB_OUTPUT

  run-examples:
    runs-on: ubuntu-latest
    needs: discover-examples
    strategy:
      matrix:
        example: ${{ fromJson(needs.discover-examples.outputs.examples) }}
      fail-fast: false  # Continue running other examples even if one fails
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Install example dependencies
      working-directory: examples/${{ matrix.example }}
      run: uv sync
        
    - name: Create .env file with API keys
      working-directory: examples/${{ matrix.example }}
      run: |
        # Only create .env file if .env.example exists
        if [ -f ".env.example" ]; then
          echo "üìù Found .env.example, creating .env file with API keys..."
          cp .env.example .env
          
          # Replace all API key placeholders regardless of which example this is
          if [ -n "${{ secrets.GOOGLE_API_KEY }}" ]; then
            sed -i 's/your_google_api_key_here/${{ secrets.GOOGLE_API_KEY }}/g' .env
            echo "‚úÖ Set GOOGLE_API_KEY"
          fi
          
          if [ -n "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            sed -i 's/your_anthropic_api_key_here/${{ secrets.ANTHROPIC_API_KEY }}/g' .env
            echo "‚úÖ Set ANTHROPIC_API_KEY"
          fi
          
          if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
            sed -i 's/your_openai_api_key_here/${{ secrets.OPENAI_API_KEY }}/g' .env
            echo "‚úÖ Set OPENAI_API_KEY"
          fi
        else
          echo "‚ÑπÔ∏è No .env.example found, skipping .env creation"
        fi
        
    - name: Run example
      working-directory: examples/${{ matrix.example }}
      timeout-minutes: 10
      run: |
        echo "üöÄ Running ${{ matrix.example }} example..."
        uv run python main.py
        
    - name: Clean up .env file
      if: always()
      working-directory: examples/${{ matrix.example }}
      run: |
        # Remove the .env file to avoid accidentally committing secrets (only if it exists)
        if [ -f ".env" ]; then
          rm -f .env
          echo "üßπ Cleaned up .env file"
        fi
